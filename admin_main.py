import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import Database
from config import ADMIN_TOKEN, ADMIN_PASSWORD, DATABASE_NAME
import traceback

# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
authorized_admins = set()

db = Database(DATABASE_NAME)

class AdminStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

router = Router()

# –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
MONTHS_UA = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}

def get_admin_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_back_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

def create_calendar_keyboard(year: int, month: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    builder = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    builder.row(
        InlineKeyboardButton(
            text=f"{MONTHS_UA[month]} {year}",
            callback_data="ignore"
        )
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_month_{year}_{month}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_month_{year}_{month}")
    )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    builder.row(
        InlineKeyboardButton(text="–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton(text="–í—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°—Ä", callback_data="ignore"),
        InlineKeyboardButton(text="–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton(text="–°–±", callback_data="ignore"),
        InlineKeyboardButton(text="–ù–¥", callback_data="ignore")
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    if month == 12:
        days_in_month = (datetime(year + 1, 1, 1) - first_day).days
    else:
        days_in_month = (datetime(year, month + 1, 1) - first_day).days

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π
    days_buttons = []

    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range(start_weekday):
        days_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        days_buttons.append(
            InlineKeyboardButton(
                text=str(day),
                callback_data=f"select_date_{year}_{month}_{day}"
            )
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 7 (–Ω–µ–¥–µ–ª—è)
    for i in range(0, len(days_buttons), 7):
        week_buttons = days_buttons[i:i + 7]
        while len(week_buttons) < 7:
            week_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        builder.row(*week_buttons)

    return builder.as_markup()

@router.message(Command("start"))
async def start_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = message.from_user.id

    if user_id in authorized_admins:
        await message.answer(
            "üîê –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_menu()
        )
    else:
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminStates.waiting_for_password)

@router.message(AdminStates.waiting_for_password)
async def check_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    if message.text == ADMIN_PASSWORD:
        user_id = message.from_user.id
        authorized_admins.add(user_id)

        await message.answer(
            "‚úÖ –ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove()
        )

@router.message(F.text == "üìä –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥")
async def start_report_generation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    user_id = message.from_user.id

    if user_id not in authorized_admins:
        await message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
        return

    now = datetime.now()
    calendar_kb = create_calendar_keyboard(now.year, now.month)

    await message.answer(
        "üìÖ –û–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É –∑–≤—ñ—Ç—É:",
        reply_markup=get_back_keyboard()
    )

    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:",
        reply_markup=calendar_kb
    )

    await state.set_state(AdminStates.waiting_for_start_date)

@router.callback_query(F.data.startswith("prev_month_"))
async def prev_month(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É"""
    _, _, year, month = callback.data.split("_")
    year, month = int(year), int(month)

    if month == 1:
        year -= 1
        month = 12
    else:
        month -= 1

    calendar_kb = create_calendar_keyboard(year, month)
    await callback.message.edit_reply_markup(reply_markup=calendar_kb)
    await callback.answer()

@router.callback_query(F.data.startswith("next_month_"))
async def next_month(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É"""
    _, _, year, month = callback.data.split("_")
    year, month = int(year), int(month)

    if month == 12:
        year += 1
        month = 1
    else:
        month += 1

    calendar_kb = create_calendar_keyboard(year, month)
    await callback.message.edit_reply_markup(reply_markup=calendar_kb)
    await callback.answer()

@router.callback_query(F.data.startswith("select_date_"))
async def select_date(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    _, _, year, month, day = callback.data.split("_")
    selected_date = f"{day.zfill(2)}.{month.zfill(2)}.{year}"

    current_state = await state.get_state()

    if current_state == AdminStates.waiting_for_start_date:
        await state.update_data(start_date=selected_date)
        await callback.message.edit_text(f"‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞: {selected_date}")

        now = datetime.now()
        calendar_kb = create_calendar_keyboard(now.year, now.month)

        await callback.message.answer(
            "üìÖ –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É –∑–≤—ñ—Ç—É:",
            reply_markup=calendar_kb
        )

        await state.set_state(AdminStates.waiting_for_end_date)

    elif current_state == AdminStates.waiting_for_end_date:
        await state.update_data(end_date=selected_date)
        await callback.message.edit_text(f"‚úÖ –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞: {selected_date}")

        data = await state.get_data()
        start_date = data.get("start_date")
        end_date = selected_date

        await generate_report(callback.message, start_date, end_date, state)

    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await callback.answer()

async def generate_report(message: types.Message, start_date: str, end_date: str, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        await message.answer("‚è≥ –§–æ—Ä–º—É—é –∑–≤—ñ—Ç, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        report_data = db.get_readings_report(start_date, end_date)

        if not report_data:
            await message.answer(
                "üìã –ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
                reply_markup=get_admin_menu()
            )
            await state.clear()
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        filename = db.export_to_excel(report_data)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file = FSInputFile(filename)
            await message.answer_document(
                file,
                caption=f"üìä –ó–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ {start_date} –ø–æ {end_date}\n"
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(report_data)}"
            )
            print(f"[SUCCESS] –û—Ç—á–µ—Ç {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if os.path.exists(filename):
                try:
                    os.remove(filename)
                    print(f"[SUCCESS] –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞")
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")

        await message.answer(
            "‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!",
            reply_markup=get_admin_menu()
        )

    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}")
        traceback.print_exc()
        await message.answer(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_menu()
        )
    finally:
        await state.clear()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=get_admin_menu()
    )
    await state.clear()

@router.message()
async def handle_unauthorized(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id

    if user_id not in authorized_admins:
        await message.answer(
            "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."
        )
    else:
        await message.answer(
            "üë§ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:",
            reply_markup=get_admin_menu()
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = Bot(token=ADMIN_TOKEN)
    dp = Dispatcher()

    dp.include_router(router)

    print("ü§ñ –ê–¥–º—ñ–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    print(f"üîê –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É: {ADMIN_PASSWORD}")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ê–¥–º—ñ–Ω-–±–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ!")